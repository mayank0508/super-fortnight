{"version":3,"sources":["component/search-box/search-box.component.jsx","component/card/card.component.jsx","component/card-list/card-list.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["SearchBox","placeholder","handleChange","className","type","onChange","Card","props","alt","src","monster","id","name","email","CardList","monsters","map","App","e","setState","searchFields","target","value","state","fetch","then","response","json","users","this","filteredmonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qTAGaA,EAAY,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAaC,EAAf,EAAeA,aAAf,OACvB,uBACEC,UAAU,SACVC,KAAK,SACLH,YAAaA,EACbI,SAAUH,KCLDI,G,YAAO,SAAAC,GAAK,OACvB,sBAAKJ,UAAU,iBAAf,UACE,qBACEK,IAAI,UACJC,IAAG,+BAA0BF,EAAMG,QAAQC,GAAxC,4BAEL,mCAAMJ,EAAMG,QAAQE,KAApB,OACA,kCAAKL,EAAMG,QAAQG,MAAnB,YCNSC,EAAW,SAAAP,GAAK,OAC3B,qBAAKJ,UAAU,YAAf,SACGI,EAAMQ,SAASC,KAAI,SAAAN,GAAO,OACzB,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,UCwCVM,G,wDAxCb,aAAe,IAAD,8BAEZ,gBAcJf,aAAe,SAACgB,GACd,EAAKC,SAAS,CAAEC,aAAcF,EAAEG,OAAOC,SAbrC,EAAKC,MAAQ,CACXR,SAAU,GACVK,aAAc,IANJ,E,qDAUd,WAAqB,IAAD,OAClBI,MAAM,8CACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAAEJ,SAAUa,S,oBAO7C,WAAU,IAAD,EAC4BC,KAAKN,MAAhCR,EADD,EACCA,SAAUK,EADX,EACWA,aACZU,EAAmBf,EAASgB,QAChC,SACEhB,GADF,OAEKA,EAASH,KAAKoB,cAAcC,SAASb,EAAaY,kBAEzD,OACE,sBAAK7B,UAAU,MAAf,UACE,gDACA,cAAC,EAAD,CACEF,YAAY,kBACZC,aAAc2B,KAAK3B,eAErB,cAAC,EAAD,CAAUa,SAAUe,W,GAnCVI,cCMHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.58821108.chunk.js","sourcesContent":["import React from 'react';\r\nimport './search-box.styles.css';\r\n\r\nexport const SearchBox = ({placeholder, handleChange,}) => (\r\n  <input\r\n    className=\"search\"\r\n    type=\"search\"\r\n    placeholder={placeholder} // here the placeholder is dynamic so that if anyone wants to another name !\r\n    onChange={handleChange}\r\n  />\r\n);\r\n","import React from 'react';\r\nimport './card.styles.css';\r\n\r\nexport const Card = props => (\r\n  <div className=\"card-container\">\r\n    <img\r\n      alt=\"monster\"\r\n      src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`}\r\n    />\r\n    <h2> {props.monster.name} </h2>\r\n    <p> {props.monster.email} </p>\r\n  </div>\r\n);\r\n","import React from 'react';\r\nimport './card-list.styles.css';\r\nimport { Card } from '../card/card.component';\r\n\r\nexport const CardList = props => (\r\n  <div className=\"card-list\">\r\n    {props.monsters.map(monster => (\r\n      <Card key={monster.id} monster={monster} />\r\n    ))}\r\n  </div>\r\n);\r\n","import React, { Component } from 'react';\nimport { SearchBox } from './component/search-box/search-box.component';\nimport { CardList } from './component/card-list/card-list.component';\n\nimport './App.css';\n\nclass App extends Component {\n  constructor() {\n    // this called the state constructor\n    super();\n\n    this.state = {\n      monsters: [],\n      searchFields: '' // beause we want to store the search in the state\n    };\n  }\n\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users') // here we will write about the website from where we are about the fetch the data\n      .then(response => response.json()) //this gives us the data in the json format\n      .then(users => this.setState({ monsters: users }));\n  }\n\nhandleChange = (e) => { // this is a lexical scope, this is done using the arrow function, this is really helpful when we are dealing with class methods\n  this.setState({ searchFields: e.target.value });\n}\n\n  render() {\n    const { monsters, searchFields } = this.state;\n    const filteredmonsters = monsters.filter(\n      (\n        monsters // this is the main search box function and its works !!\n      ) => monsters.name.toLowerCase().includes(searchFields.toLowerCase())\n    ); // this is a live update system\n    return (\n      <div className=\"App\">\n        <h1>Monsters Bible</h1> \n        <SearchBox\n          placeholder=\"Search monsters\"\n          handleChange={this.handleChange}\n        />\n        <CardList monsters={filteredmonsters} />\n      </div> // here the monsters is a prop which is being used in the card list\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}